{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TEST_GIFS","App","useState","walletAddress","setWalletAddress","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","tostring","toString","alert","connectWallet","useEffect","onLoad","addEventListener","removeEventListener","className","onclick","map","gif","src","alt","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAAe,MAA0B,yC,eCMnCA,EAAY,CAChB,6CACA,6CACA,6CACA,4CACA,yCACA,wCACA,8CAgGaC,EA7FH,WAEV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKxBA,EAAOC,UALiB,wBAMzBC,QAAQC,IAAI,4CANa,SAOFH,EAAOI,QAAQ,CAACC,eAAe,IAP7B,OAOnBC,EAPmB,OAQzBJ,QAAQC,IAAI,sCAAoCG,EAASC,UAAUC,YAEnEZ,EAAiBU,EAASC,UAAUE,YAVX,gCAc3BC,MAAM,2EAdqB,0DAiB7BR,QAAQC,IAAR,MAjB6B,0DAAH,qDAqBxBQ,EAAa,uCAAG,gCAAAb,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOI,UAJZ,OAIZE,EAJY,OAKlBJ,QAAQC,IAAI,8BAA+BG,EAASC,UAAUE,YAC9Db,EAAiBU,EAASC,UAAUE,YANlB,2CAAH,qDAwCnB,OARAG,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAf,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOe,iBAAiB,OAAQD,GACzB,kBAAMd,OAAOgB,oBAAoB,OAAQF,MAC/C,IAGD,qBAAKG,UAAU,MAAf,SAEE,sBAAKA,UAAWrB,EAAgB,mBAAqB,YAArD,UACE,sBAAKqB,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,kEACA,mBAAGA,UAAU,WAAb,8CAIErB,GAvCR,wBAAQqB,UAAU,mCAClBC,QAASN,IADT,kCAyCOhB,GAlCP,qBAAKqB,UAAU,sBAAf,SACE,qBAAKA,UAAU,WAAf,SACGxB,EAAU0B,KAAI,SAAAC,GAAG,OAChB,qBAAKH,UAAU,WAAf,SACE,qBAAKI,IAAKD,EAAKE,IAAKF,KADSA,aAiCjC,sBAAKH,UAAU,mBAAf,UACE,qBAAKK,IAAI,eAAeL,UAAU,eAAeI,IAAKE,IACtD,mBACEN,UAAU,cACVO,KA/FM,qCAgGNC,OAAO,SACPC,IAAI,aAJN,8DC5FVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5eb6af41.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from \"react\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\nconst TWITTER_LINK = `https://twitter.com/Rafael41603219`;\n\nconst TEST_GIFS = [\n  \"https://giphy.com/embed/r8b5bRsznrT6naOLq9\",\n  \"https://giphy.com/embed/ERt4qEWqOC8fRTPcAw\",\n  \"https://giphy.com/embed/5rqPkvN9pveHOuT3bx\",\n  \"https://giphy.com/embed/l1J9xOZzfmKpYep3O\",\n  \"https://giphy.com/embed/13u96fd8W8yCQw\",\n  \"https://giphy.com/embed/ELham0Mveox9e\",\n  \"https://giphy.com/embed/3oriOdiQDLHsNVHBAs\",\n]\n\nconst App = () => {\n\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if(solana.isPhantom) {\n          console.log(\"Phantom wallet encontrada!! 🥳\");\n          const response = await solana.connect({onlyIfTrusted: true});\n          console.log(\"Conectado con la llave pública: \", response.publicKey.tostring());\n\n          setWalletAddress(response.publicKey.toString());\n\n        }\n      } else {\n        alert(\"Wallet no encontrada 😞. Descarga phantom wallet 👻\");\n      }\n    } catch(error) {\n      console.log(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key: \", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button className=\"cta-button connect-wattet-button\"\n    onclick={connectWallet()}>\n      Connect 🔌\n    </button>\n  );\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <div className=\"gif-grid\">\n        {TEST_GIFS.map(gif => (\n          <div className=\"gif-item\" key={gif}>\n            <img src={gif} alt={gif} />\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n\n  /** useEffect se llama una vez en el montaje del componente cuando\n  * ese segundo parámetro (el []) esta vacío.\n  */\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Cypherpunk Revolution 🏴‍☠️</p>\n          <p className=\"sub-text\">\n            View the cypherpunk messages...\n          </p>\n          {/* Render your connect to wallet button right here*/}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/** We just need to add the inverse here!*/}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Built by rafaelfuentes.eth 😎`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}